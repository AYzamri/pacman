<!DOCTYPE html>
<html>

<head></head>

<body>SCORE:
<input id="lblScore" type="text"/>
<br/>
TIME:
<input id="lblTime" type="text"/>
<br/>
<canvas id="canvas" height="600" width="900"></canvas>


<script type="text/javascript">
    var context = canvas.getContext("2d");
    var pacman = {};
    var ghostOne = {};
    var board;
    var score;
    var pac_color;
    var start_time;
    var time_elapsed;
    var interval;
    var ghostInterval;
    var direction = 4;
    var ghostOneImage;
    var lives = 3;
    var rows=10;
    var cols=15;

    Start();

    function Start() {
        board = [];
        score = 0;
        pac_color = "yellow";
        var cnt = 150;
        var food_remain = 90;
        var pacman_remain = 1;
        start_time = new Date();
        ghostOneImage = new Image();
        ghostOneImage.src = "images/ghost.png";
        //create cols

        for (var i = 0; i < cols; i++) {
            board[i] = [];
            //put obstacles in (i=3,j=3) and (i=3,j=4) and (i=3,j=5), (i=6,j=1) and (i=6,j=2)
            for (var j = 0; j < rows; j++) {
                if ((i == 3 && j == 3) || (i == 3 && j == 4) || (i == 3 && j == 5) || (i == 6 && j == 1) || (i == 6 && j == 2)|| (i == 8 && j == 5)|| (i == 8 && j == 6)|| (i == 13 && j == 1)|| (i == 13 && j == 0)
                    || (i == 2 && j == 5)|| (i == 1 && j == 5)|| (i == 0 && j == 5)|| (i == 9 && j == 6)|| (i == 10 && j == 6)) {
                    board[i][j] = 4;
                }
                else {
                    var randomNum = Math.random();
                    if (randomNum <= food_remain / cnt) {
                        food_remain--;
                        board[i][j] = 1;
                    } else if (randomNum < (pacman_remain + food_remain) / cnt) {
                        pacman.i = i;
                        pacman.j = j;
                        pacman_remain--;
                        board[i][j] = 2;
                    } else {
                        board[i][j] = 0;
                    }
                    cnt--;
                }
            }

            //put ghosts in corners
            ghostOne.i = 0;
            ghostOne.j = 0;
        }
        while (food_remain > 0) {
            var emptyCell = findRandomEmptyCell(board);
            board[emptyCell[0]][emptyCell[1]] = 1;
            food_remain--;
        }
        keysDown = {};
        addEventListener("keydown", function (e) {
            keysDown[e.keyCode] = true;
        }, false);
        addEventListener("keyup", function (e) {
            keysDown[e.keyCode] = false;
        }, false);
        interval = setInterval(UpdatePosition, 100);
        ghostInterval = setInterval(moveGhosts, 350);
    }

    function Draw(x) {

        canvas.width = canvas.width; //clean board
        context.fillStyle = "black";
        context.fillRect(0, 0, canvas.width, canvas.height);
        lblScore.value = score;
        lblTime.value = time_elapsed;
        for (var i = 0; i < cols; i++) {
            for (var j = 0; j < rows; j++) {
                var center = {};
                center.x = i * 60 + 30;
                center.y = j * 60 + 30;
                //pacman
                if (board[i][j] == 2) {
                    ChangePacmanDir(direction, center);
                }

                //ball
                else if (board[i][j] == 1) {
                    context.beginPath();
                    context.arc(center.x, center.y, 15, 0, 2 * Math.PI); // circle
                    context.fillStyle = "white"; //color
                    context.fill();
                }

                //obstacle
                else if (board[i][j] == 4) {
                    context.beginPath();
                    context.rect(center.x - 30, center.y - 30, 60, 60);
                    context.fillStyle = "darkBlue"; //color
                    context.fill();
                }
            }
        }

        //draw ghosts
        context.drawImage(ghostOneImage, ghostOne.i * 60 +3, ghostOne.j * 60 +3, 45, 45);
    }

    function UpdatePosition() {
        board[pacman.i][pacman.j] = 0;
        x = GetKeyPressed();
        if (x != -1) {
            direction = x;
        }
        //check up
        if (x == 1) {
            if (pacman.j > 0 && board[pacman.i][pacman.j - 1] != 4) {
                pacman.j--;
            }
        }
        //check down
        if (x == 2) {
            if (pacman.j < rows-1 && board[pacman.i][pacman.j + 1] != 4) {
                pacman.j++;
            }
        }
        //check left
        if (x == 3) {
            if (pacman.i > 0 && board[pacman.i - 1][pacman.j] != 4) {
                pacman.i--;
            }
        }
        //check right
        if (x == 4) {
            if (pacman.i < cols-1 && board[pacman.i + 1][pacman.j] != 4) {
                pacman.i++;
            }
        }

        //eat a ball
        if (board[pacman.i][pacman.j] == 1) {
            score++;
        }

        //meet ghost
        if (pacman.i == ghostOne.i && pacman.j == ghostOne.j) {
            hitGhost();
        }
        else {
            board[pacman.i][pacman.j] = 2;
            var currentTime = new Date();
            time_elapsed = (currentTime - start_time) / 1000;
            if (score >= 20 && time_elapsed <= 10) {
                pac_color = "green";
            }
            if (score == 50) {
                window.clearInterval(interval);
                window.alert("Game completed");
            }
            else {
                Draw(direction);
            }
        }
    }

    function moveGhosts() {
        var distances = [];
        //check left
        if (ghostOne.i - 1 < 0||board[ghostOne.i - 1][ghostOne.j] == 4  ) {
            distances[0] = Number.MAX_VALUE;
        }
        else {
            distances[0] = Math.abs((ghostOne.i) - 1 - pacman.i) + Math.abs(ghostOne.j - pacman.j);
        }

        //check right
        if (ghostOne.i + 1 >= cols||board[ghostOne.i + 1][ghostOne.j] == 4  ) {
            distances[1] = Number.MAX_VALUE;
        }
        else {
            distances[1] = Math.abs((ghostOne.i) + 1 - pacman.i) + Math.abs(ghostOne.j - pacman.j);
        }

        //check down
        if (ghostOne.j + 1 >= rows|| board[ghostOne.i][ghostOne.j + 1] == 4 ) {
            distances[2] = Number.MAX_VALUE;
        }
        else {
            distances[2] = Math.abs(ghostOne.i - pacman.i) + Math.abs((ghostOne.j) + 1 - pacman.j);
        }

        //check left
        if (ghostOne.j - 1 < 0|| board[ghostOne.i][ghostOne.j - 1] == 4  ) {
            distances[3] = Number.MAX_VALUE;
        }
        else {
            distances[3] = Math.abs(ghostOne.i - pacman.i) + Math.abs((ghostOne.j) - 1 - pacman.j);
        }

        //find min distance
        var min = Number.MAX_VALUE;
        var minIndexDirection;
        for (var index = 0; index <= 3; index++) {
            if (distances[index] < min) {
                min = distances[index];
                minIndexDirection = index;
            }
        }

        //change ghost location according to min distance to pacman
        switch (minIndexDirection){
            case 0:
                ghostOne.i-=1;
                break;
            case 1:
                ghostOne.i+=1;
                break;
            case 2:
                ghostOne.j+=1;
                break;
            case 3:
                ghostOne.j-=1;
                break;
        }

    }

    function ChangePacmanDir(x, center) {
        var shapeAdjust1, shapeAdjust2;
        var eyeAdjust1, eyeAdjust2;

        //pressed right
        if (x == 4) {
            shapeAdjust1 = 0.15;
            shapeAdjust2 = 1.85;
            eyeAdjust1 = 5;
            eyeAdjust2 = -15;
        }

        //pressed left
        if (x == 3) {
            shapeAdjust1 = 1.15;
            shapeAdjust2 = 0.85;
            eyeAdjust1 = 5;
            eyeAdjust2 = -15;
        }

        //pressed down
        if (x == 2) {
            shapeAdjust1 = 0.7;
            shapeAdjust2 = 0.3;
            eyeAdjust1 = 10;
            eyeAdjust2 = -10;

        }

        //pressed up
        if (x == 1) {
            shapeAdjust1 = 1.7;
            shapeAdjust2 = 1.3;
            eyeAdjust1 = 16;
            eyeAdjust2 = -5;

        }

        context.beginPath();
        context.arc(center.x, center.y, 30, Math.PI * shapeAdjust1, shapeAdjust2 * Math.PI); // half circle
        context.lineTo(center.x, center.y);
        context.fillStyle = pac_color; //color
        context.fill();
        context.beginPath();
        context.arc(center.x + eyeAdjust1, center.y + eyeAdjust2, 5, 0, 2 * Math.PI); // circle
        context.fillStyle = "black"; //color
        context.fill();
    }

    function hitGhost() {
        lives--;
    }

    /**
     * @return {number}
     */
    function GetKeyPressed() {
        //up
        if (keysDown[38]) {
            return 1;
        }
        //down
        if (keysDown[40]) {
            return 2;
        }
        //left
        if (keysDown[37]) {
            return 3;
        }
        //right
        if (keysDown[39]) {
            return 4;
        }

        return -1;
    }
    function findRandomEmptyCell(board) {
        var i = Math.floor((Math.random() * (cols-1)) + 1);
        var j = Math.floor((Math.random() * (rows-1)) + 1);
        while (board[i][j] != 0) {
            i = Math.floor((Math.random() * (cols-1)) + 1);
            j = Math.floor((Math.random() * (rows-1)) + 1);
        }
        return [i, j];
    }
</script>
</body>

</html>